/* tslint:disable */
/* eslint-disable */
/**
 * namaste-be
 * Namaste Server
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AssetContractTypeEnum } from './AssetContractTypeEnum';
import {
    AssetContractTypeEnumFromJSON,
    AssetContractTypeEnumFromJSONTyped,
    AssetContractTypeEnumToJSON,
} from './AssetContractTypeEnum';
import type { Media } from './Media';
import {
    MediaFromJSON,
    MediaFromJSONTyped,
    MediaToJSON,
} from './Media';
import type { NetworkEnum } from './NetworkEnum';
import {
    NetworkEnumFromJSON,
    NetworkEnumFromJSONTyped,
    NetworkEnumToJSON,
} from './NetworkEnum';

/**
 * 
 * @export
 * @interface IContract
 */
export interface IContract {
    /**
     * 
     * @type {any}
     * @memberof IContract
     */
    company?: any | null;
    /**
     * 
     * @type {AssetContractTypeEnum}
     * @memberof IContract
     */
    type: AssetContractTypeEnum;
    /**
     * 
     * @type {NetworkEnum}
     * @memberof IContract
     */
    chain: NetworkEnum;
    /**
     * Name of the contract. This will help you identify it later. This is also committed to the blockchain.
     * @type {string}
     * @memberof IContract
     */
    name: string;
    /**
     * The symbol of the contract. This is also committed to the blockchain. The tokens from this contract will have this symbol. eg. BAYC token
     * @type {string}
     * @memberof IContract
     */
    symbol: string;
    /**
     * The description of the contract. Any string will do.
     * @type {string}
     * @memberof IContract
     */
    description: string;
    /**
     * The url of the image for the collection which this contract represents. Part of the contract metadata.
     * @type {string}
     * @memberof IContract
     */
    image: string;
    /**
     * The url of the website/video/etc for the collection which this contract represents. Part of the contract metadata.
     * @type {string}
     * @memberof IContract
     */
    externalUrl: string;
    /**
     * List of key value pairs that will add to the contract metadata.
     * @type {Array<Media>}
     * @memberof IContract
     */
    media: Array<Media>;
}

/**
 * Check if a given object implements the IContract interface.
 */
export function instanceOfIContract(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "chain" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "symbol" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "image" in value;
    isInstance = isInstance && "externalUrl" in value;
    isInstance = isInstance && "media" in value;

    return isInstance;
}

export function IContractFromJSON(json: any): IContract {
    return IContractFromJSONTyped(json, false);
}

export function IContractFromJSONTyped(json: any, ignoreDiscriminator: boolean): IContract {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'company': !exists(json, 'company') ? undefined : json['company'],
        'type': AssetContractTypeEnumFromJSON(json['type']),
        'chain': NetworkEnumFromJSON(json['chain']),
        'name': json['name'],
        'symbol': json['symbol'],
        'description': json['description'],
        'image': json['image'],
        'externalUrl': json['externalUrl'],
        'media': ((json['media'] as Array<any>).map(MediaFromJSON)),
    };
}

export function IContractToJSON(value?: IContract | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'company': value.company,
        'type': AssetContractTypeEnumToJSON(value.type),
        'chain': NetworkEnumToJSON(value.chain),
        'name': value.name,
        'symbol': value.symbol,
        'description': value.description,
        'image': value.image,
        'externalUrl': value.externalUrl,
        'media': ((value.media as Array<any>).map(MediaToJSON)),
    };
}

