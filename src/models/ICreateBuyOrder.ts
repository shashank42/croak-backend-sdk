/* tslint:disable */
/* eslint-disable */
/**
 * namaste-be
 * Namaste Server
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface ICreateBuyOrder
 */
export interface ICreateBuyOrder {
  /**
   *
   * @type {any}
   * @memberof ICreateBuyOrder
   */
  company?: any | null;
  /**
   *
   * @type {any}
   * @memberof ICreateBuyOrder
   */
  walletFrom?: any | null;
  /**
   * The id of the sell order that you are buying.
   * @type {string}
   * @memberof ICreateBuyOrder
   */
  sellOrderId?: string;
  /**
   * The walletId of the wallet that is going to authorize and pay to buy the token which is on sale.
   * @type {string}
   * @memberof ICreateBuyOrder
   */
  makerWalletId: string;
  /**
   * The walletId of the wallet that is going to receive the tokens in token being bought.
   * @type {string}
   * @memberof ICreateBuyOrder
   */
  takerWalletId?: string;
  /**
   * The id of the tokenData that is being sent to the seller in to buy the token being offered.
   * @type {string}
   * @memberof ICreateBuyOrder
   */
  makeTokenDataId: string;
  /**
   * The number of tokens of makeTokenDataId that you are sending to the seller.
   * @type {number}
   * @memberof ICreateBuyOrder
   */
  makeAmount: number;
  /**
   * The id of the tokenData that is being bought.
   * @type {string}
   * @memberof ICreateBuyOrder
   */
  takeTokenDataId: string;
  /**
   * The number of tokens (of takeTokenDataId) that you are buying.
   * @type {number}
   * @memberof ICreateBuyOrder
   */
  takeAmount: number;
}

/**
 * Check if a given object implements the ICreateBuyOrder interface.
 */
export function instanceOfICreateBuyOrder(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'makerWalletId' in value;
  isInstance = isInstance && 'makeTokenDataId' in value;
  isInstance = isInstance && 'makeAmount' in value;
  isInstance = isInstance && 'takeTokenDataId' in value;
  isInstance = isInstance && 'takeAmount' in value;

  return isInstance;
}

export function ICreateBuyOrderFromJSON(json: any): ICreateBuyOrder {
  return ICreateBuyOrderFromJSONTyped(json, false);
}

export function ICreateBuyOrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): ICreateBuyOrder {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    company: !exists(json, 'company') ? undefined : json['company'],
    walletFrom: !exists(json, 'walletFrom') ? undefined : json['walletFrom'],
    sellOrderId: !exists(json, 'sellOrderId') ? undefined : json['sellOrderId'],
    makerWalletId: json['makerWalletId'],
    takerWalletId: !exists(json, 'takerWalletId') ? undefined : json['takerWalletId'],
    makeTokenDataId: json['makeTokenDataId'],
    makeAmount: json['makeAmount'],
    takeTokenDataId: json['takeTokenDataId'],
    takeAmount: json['takeAmount'],
  };
}

export function ICreateBuyOrderToJSON(value?: ICreateBuyOrder | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    company: value.company,
    walletFrom: value.walletFrom,
    sellOrderId: value.sellOrderId,
    makerWalletId: value.makerWalletId,
    takerWalletId: value.takerWalletId,
    makeTokenDataId: value.makeTokenDataId,
    makeAmount: value.makeAmount,
    takeTokenDataId: value.takeTokenDataId,
    takeAmount: value.takeAmount,
  };
}
