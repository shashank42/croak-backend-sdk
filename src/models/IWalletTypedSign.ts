/* tslint:disable */
/* eslint-disable */
/**
 * namaste-be
 * Namaste Server
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface IWalletTypedSign
 */
export interface IWalletTypedSign {
  /**
   *
   * @type {any}
   * @memberof IWalletTypedSign
   */
  company?: any | null;
  /**
   *
   * @type {string}
   * @memberof IWalletTypedSign
   */
  walletId: string;
  /**
   *
   * @type {string}
   * @memberof IWalletTypedSign
   */
  domainName: string;
  /**
   *
   * @type {string}
   * @memberof IWalletTypedSign
   */
  domainVersion: string;
  /**
   *
   * @type {number}
   * @memberof IWalletTypedSign
   */
  chainId: number;
  /**
   *
   * @type {string}
   * @memberof IWalletTypedSign
   */
  contractAddress: string;
  /**
   *
   * @type {string}
   * @memberof IWalletTypedSign
   */
  primaryType: string;
  /**
   *
   * @type {any}
   * @memberof IWalletTypedSign
   */
  types: any | null;
  /**
   *
   * @type {any}
   * @memberof IWalletTypedSign
   */
  form: any | null;
}

/**
 * Check if a given object implements the IWalletTypedSign interface.
 */
export function instanceOfIWalletTypedSign(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'walletId' in value;
  isInstance = isInstance && 'domainName' in value;
  isInstance = isInstance && 'domainVersion' in value;
  isInstance = isInstance && 'chainId' in value;
  isInstance = isInstance && 'contractAddress' in value;
  isInstance = isInstance && 'primaryType' in value;
  isInstance = isInstance && 'types' in value;
  isInstance = isInstance && 'form' in value;

  return isInstance;
}

export function IWalletTypedSignFromJSON(json: any): IWalletTypedSign {
  return IWalletTypedSignFromJSONTyped(json, false);
}

export function IWalletTypedSignFromJSONTyped(json: any, ignoreDiscriminator: boolean): IWalletTypedSign {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    company: !exists(json, 'company') ? undefined : json['company'],
    walletId: json['walletId'],
    domainName: json['domainName'],
    domainVersion: json['domainVersion'],
    chainId: json['chainId'],
    contractAddress: json['contractAddress'],
    primaryType: json['primaryType'],
    types: json['types'],
    form: json['form'],
  };
}

export function IWalletTypedSignToJSON(value?: IWalletTypedSign | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    company: value.company,
    walletId: value.walletId,
    domainName: value.domainName,
    domainVersion: value.domainVersion,
    chainId: value.chainId,
    contractAddress: value.contractAddress,
    primaryType: value.primaryType,
    types: value.types,
    form: value.form,
  };
}
