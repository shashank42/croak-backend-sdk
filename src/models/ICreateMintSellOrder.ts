/* tslint:disable */
/* eslint-disable */
/**
 * namaste-be
 * Namaste Server
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 *
 * @export
 * @interface ICreateMintSellOrder
 */
export interface ICreateMintSellOrder {
  /**
   *
   * @type {any}
   * @memberof ICreateMintSellOrder
   */
  company?: any | null;
  /**
   * The tokenDataId of the tokenData that is to be sold. The reserve price (minimum price) will be picked from the tokenData itself. GET on the tokenData to get all the information.
   * @type {string}
   * @memberof ICreateMintSellOrder
   */
  tokenDataId: string;
  /**
   * The number of tokens that you want in exchange for selling this tokenData. It is the number of reserveTokenDataId tokens that you are pricing the sale at. GET on the tokenData to get the value of the reserveTokenDataId.
   * @type {number}
   * @memberof ICreateMintSellOrder
   */
  takeAmount: number;
}

/**
 * Check if a given object implements the ICreateMintSellOrder interface.
 */
export function instanceOfICreateMintSellOrder(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'tokenDataId' in value;
  isInstance = isInstance && 'takeAmount' in value;

  return isInstance;
}

export function ICreateMintSellOrderFromJSON(json: any): ICreateMintSellOrder {
  return ICreateMintSellOrderFromJSONTyped(json, false);
}

export function ICreateMintSellOrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): ICreateMintSellOrder {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    company: !exists(json, 'company') ? undefined : json['company'],
    tokenDataId: json['tokenDataId'],
    takeAmount: json['takeAmount'],
  };
}

export function ICreateMintSellOrderToJSON(value?: ICreateMintSellOrder | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    company: value.company,
    tokenDataId: value.tokenDataId,
    takeAmount: value.takeAmount,
  };
}
