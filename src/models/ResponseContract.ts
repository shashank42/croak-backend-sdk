/* tslint:disable */
/* eslint-disable */
/**
 * namaste-be
 * Namaste Server
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AssetContractTypeEnum } from './AssetContractTypeEnum';
import {
  AssetContractTypeEnumFromJSON,
  AssetContractTypeEnumFromJSONTyped,
  AssetContractTypeEnumToJSON,
} from './AssetContractTypeEnum';
import type { Media } from './Media';
import { MediaFromJSON, MediaFromJSONTyped, MediaToJSON } from './Media';
import type { NetworkEnum } from './NetworkEnum';
import { NetworkEnumFromJSON, NetworkEnumFromJSONTyped, NetworkEnumToJSON } from './NetworkEnum';

/**
 *
 * @export
 * @interface ResponseContract
 */
export interface ResponseContract {
  /**
   *
   * @type {string}
   * @memberof ResponseContract
   */
  name: string;
  /**
   *
   * @type {string}
   * @memberof ResponseContract
   */
  description: string;
  /**
   *
   * @type {string}
   * @memberof ResponseContract
   */
  symbol: string;
  /**
   *
   * @type {NetworkEnum}
   * @memberof ResponseContract
   */
  chain: NetworkEnum;
  /**
   *
   * @type {string}
   * @memberof ResponseContract
   */
  image: string;
  /**
   *
   * @type {string}
   * @memberof ResponseContract
   */
  externalUrl: string;
  /**
   *
   * @type {AssetContractTypeEnum}
   * @memberof ResponseContract
   */
  type: AssetContractTypeEnum;
  /**
   *
   * @type {Array<Media>}
   * @memberof ResponseContract
   */
  media: Array<Media>;
  /**
   *
   * @type {string}
   * @memberof ResponseContract
   */
  contractAddress?: string;
  /**
   *
   * @type {string}
   * @memberof ResponseContract
   */
  transactionHash?: string;
  /**
   *
   * @type {boolean}
   * @memberof ResponseContract
   */
  confirmed?: boolean;
  /**
   *
   * @type {string}
   * @memberof ResponseContract
   */
  deployer: string;
  /**
   *
   * @type {string}
   * @memberof ResponseContract
   */
  factory: string;
  /**
   *
   * @type {string}
   * @memberof ResponseContract
   */
  owner: string;
  /**
   *
   * @type {string}
   * @memberof ResponseContract
   */
  creatorId: string;
  /**
   *
   * @type {string}
   * @memberof ResponseContract
   */
  id: string;
}

/**
 * Check if a given object implements the ResponseContract interface.
 */
export function instanceOfResponseContract(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'name' in value;
  isInstance = isInstance && 'description' in value;
  isInstance = isInstance && 'symbol' in value;
  isInstance = isInstance && 'chain' in value;
  isInstance = isInstance && 'image' in value;
  isInstance = isInstance && 'externalUrl' in value;
  isInstance = isInstance && 'type' in value;
  isInstance = isInstance && 'media' in value;
  isInstance = isInstance && 'deployer' in value;
  isInstance = isInstance && 'factory' in value;
  isInstance = isInstance && 'owner' in value;
  isInstance = isInstance && 'creatorId' in value;
  isInstance = isInstance && 'id' in value;

  return isInstance;
}

export function ResponseContractFromJSON(json: any): ResponseContract {
  return ResponseContractFromJSONTyped(json, false);
}

export function ResponseContractFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResponseContract {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    name: json['name'],
    description: json['description'],
    symbol: json['symbol'],
    chain: NetworkEnumFromJSON(json['chain']),
    image: json['image'],
    externalUrl: json['externalUrl'],
    type: AssetContractTypeEnumFromJSON(json['type']),
    media: (json['media'] as Array<any>).map(MediaFromJSON),
    contractAddress: !exists(json, 'contractAddress') ? undefined : json['contractAddress'],
    transactionHash: !exists(json, 'transactionHash') ? undefined : json['transactionHash'],
    confirmed: !exists(json, 'confirmed') ? undefined : json['confirmed'],
    deployer: json['deployer'],
    factory: json['factory'],
    owner: json['owner'],
    creatorId: json['creatorId'],
    id: json['id'],
  };
}

export function ResponseContractToJSON(value?: ResponseContract | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    description: value.description,
    symbol: value.symbol,
    chain: NetworkEnumToJSON(value.chain),
    image: value.image,
    externalUrl: value.externalUrl,
    type: AssetContractTypeEnumToJSON(value.type),
    media: (value.media as Array<any>).map(MediaToJSON),
    contractAddress: value.contractAddress,
    transactionHash: value.transactionHash,
    confirmed: value.confirmed,
    deployer: value.deployer,
    factory: value.factory,
    owner: value.owner,
    creatorId: value.creatorId,
    id: value.id,
  };
}
