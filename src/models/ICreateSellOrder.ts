/* tslint:disable */
/* eslint-disable */
/**
 * namaste-be
 * Namaste Server
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MarketPlaceOrderTypesEnum } from './MarketPlaceOrderTypesEnum';
import {
  MarketPlaceOrderTypesEnumFromJSON,
  MarketPlaceOrderTypesEnumFromJSONTyped,
  MarketPlaceOrderTypesEnumToJSON,
} from './MarketPlaceOrderTypesEnum';

/**
 *
 * @export
 * @interface ICreateSellOrder
 */
export interface ICreateSellOrder {
  /**
   *
   * @type {any}
   * @memberof ICreateSellOrder
   */
  company?: any | null;
  /**
   *
   * @type {any}
   * @memberof ICreateSellOrder
   */
  walletFrom?: any | null;
  /**
   * The wallet id which owns the token that is going to be sold. This is the wallet that will approve the sell order.
   * @type {string}
   * @memberof ICreateSellOrder
   */
  makerWalletId: string;
  /**
   * The wallet id which will receive the tokens in exchange for the token being sold (proceeds from the sale). So one user can sell and another can receive the proceeds.If it is not provided, will assume the value in makerWalletId.
   * @type {string}
   * @memberof ICreateSellOrder
   */
  takerWalletId?: string;
  /**
   * The tokenDataId of the tokenData that is to be sold. GET on the tokenData to get all the information.
   * @type {string}
   * @memberof ICreateSellOrder
   */
  makeTokenDataId: string;
  /**
   * The number of tokens of makeTokenDataId that you are selling in this sell order.
   * @type {number}
   * @memberof ICreateSellOrder
   */
  makeAmount: number;
  /**
   * The tokenDataId being expected in return during the sale. GET on the tokenData to get all the information.
   * @type {string}
   * @memberof ICreateSellOrder
   */
  takeTokenDataId: string;
  /**
   * The number of tokens of takeTokenDataId that you are expecting in return during the sale.
   * @type {number}
   * @memberof ICreateSellOrder
   */
  takeAmount: number;
  /**
   *
   * @type {MarketPlaceOrderTypesEnum}
   * @memberof ICreateSellOrder
   */
  type?: MarketPlaceOrderTypesEnum;
}

/**
 * Check if a given object implements the ICreateSellOrder interface.
 */
export function instanceOfICreateSellOrder(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'makerWalletId' in value;
  isInstance = isInstance && 'makeTokenDataId' in value;
  isInstance = isInstance && 'makeAmount' in value;
  isInstance = isInstance && 'takeTokenDataId' in value;
  isInstance = isInstance && 'takeAmount' in value;

  return isInstance;
}

export function ICreateSellOrderFromJSON(json: any): ICreateSellOrder {
  return ICreateSellOrderFromJSONTyped(json, false);
}

export function ICreateSellOrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): ICreateSellOrder {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    company: !exists(json, 'company') ? undefined : json['company'],
    walletFrom: !exists(json, 'walletFrom') ? undefined : json['walletFrom'],
    makerWalletId: json['makerWalletId'],
    takerWalletId: !exists(json, 'takerWalletId') ? undefined : json['takerWalletId'],
    makeTokenDataId: json['makeTokenDataId'],
    makeAmount: json['makeAmount'],
    takeTokenDataId: json['takeTokenDataId'],
    takeAmount: json['takeAmount'],
    type: !exists(json, 'type') ? undefined : MarketPlaceOrderTypesEnumFromJSON(json['type']),
  };
}

export function ICreateSellOrderToJSON(value?: ICreateSellOrder | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    company: value.company,
    walletFrom: value.walletFrom,
    makerWalletId: value.makerWalletId,
    takerWalletId: value.takerWalletId,
    makeTokenDataId: value.makeTokenDataId,
    makeAmount: value.makeAmount,
    takeTokenDataId: value.takeTokenDataId,
    takeAmount: value.takeAmount,
    type: MarketPlaceOrderTypesEnumToJSON(value.type),
  };
}
