/* tslint:disable */
/* eslint-disable */
/**
 * namaste-be
 * Namaste Server
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { MarketPlaceOrderTypesEnum } from './MarketPlaceOrderTypesEnum';
import {
    MarketPlaceOrderTypesEnumFromJSON,
    MarketPlaceOrderTypesEnumFromJSONTyped,
    MarketPlaceOrderTypesEnumToJSON,
} from './MarketPlaceOrderTypesEnum';
import type { WalletType } from './WalletType';
import {
    WalletTypeFromJSON,
    WalletTypeFromJSONTyped,
    WalletTypeToJSON,
} from './WalletType';

/**
 * 
 * @export
 * @interface ResponseBuyOrder
 */
export interface ResponseBuyOrder {
    /**
     * 
     * @type {string}
     * @memberof ResponseBuyOrder
     */
    makerWalletId: string;
    /**
     * 
     * @type {WalletType}
     * @memberof ResponseBuyOrder
     */
    makerWalletType: WalletType;
    /**
     * 
     * @type {string}
     * @memberof ResponseBuyOrder
     */
    takerWalletId: string;
    /**
     * 
     * @type {WalletType}
     * @memberof ResponseBuyOrder
     */
    takerWalletType: WalletType;
    /**
     * 
     * @type {string}
     * @memberof ResponseBuyOrder
     */
    companyId: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseBuyOrder
     */
    makeTokenDataId: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseBuyOrder
     */
    takeTokenDataId: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseBuyOrder
     */
    sellOrderId?: string;
    /**
     * 
     * @type {number}
     * @memberof ResponseBuyOrder
     */
    makeAmount: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseBuyOrder
     */
    takeAmount: number;
    /**
     * 
     * @type {string}
     * @memberof ResponseBuyOrder
     */
    status: string;
    /**
     * 
     * @type {MarketPlaceOrderTypesEnum}
     * @memberof ResponseBuyOrder
     */
    type: MarketPlaceOrderTypesEnum;
    /**
     * 
     * @type {boolean}
     * @memberof ResponseBuyOrder
     */
    isClaimed: boolean;
    /**
     * 
     * @type {string}
     * @memberof ResponseBuyOrder
     */
    exchangeContract: string;
    /**
     * 
     * @type {number}
     * @memberof ResponseBuyOrder
     */
    startTime: number;
    /**
     * 
     * @type {number}
     * @memberof ResponseBuyOrder
     */
    endTime: number;
    /**
     * 
     * @type {string}
     * @memberof ResponseBuyOrder
     */
    signature: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseBuyOrder
     */
    transactionHash: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseBuyOrder
     */
    id: string;
}

/**
 * Check if a given object implements the ResponseBuyOrder interface.
 */
export function instanceOfResponseBuyOrder(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "makerWalletId" in value;
    isInstance = isInstance && "makerWalletType" in value;
    isInstance = isInstance && "takerWalletId" in value;
    isInstance = isInstance && "takerWalletType" in value;
    isInstance = isInstance && "companyId" in value;
    isInstance = isInstance && "makeTokenDataId" in value;
    isInstance = isInstance && "takeTokenDataId" in value;
    isInstance = isInstance && "makeAmount" in value;
    isInstance = isInstance && "takeAmount" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "isClaimed" in value;
    isInstance = isInstance && "exchangeContract" in value;
    isInstance = isInstance && "startTime" in value;
    isInstance = isInstance && "endTime" in value;
    isInstance = isInstance && "signature" in value;
    isInstance = isInstance && "transactionHash" in value;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function ResponseBuyOrderFromJSON(json: any): ResponseBuyOrder {
    return ResponseBuyOrderFromJSONTyped(json, false);
}

export function ResponseBuyOrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResponseBuyOrder {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'makerWalletId': json['makerWalletId'],
        'makerWalletType': WalletTypeFromJSON(json['makerWalletType']),
        'takerWalletId': json['takerWalletId'],
        'takerWalletType': WalletTypeFromJSON(json['takerWalletType']),
        'companyId': json['companyId'],
        'makeTokenDataId': json['makeTokenDataId'],
        'takeTokenDataId': json['takeTokenDataId'],
        'sellOrderId': !exists(json, 'sellOrderId') ? undefined : json['sellOrderId'],
        'makeAmount': json['makeAmount'],
        'takeAmount': json['takeAmount'],
        'status': json['status'],
        'type': MarketPlaceOrderTypesEnumFromJSON(json['type']),
        'isClaimed': json['isClaimed'],
        'exchangeContract': json['exchangeContract'],
        'startTime': json['startTime'],
        'endTime': json['endTime'],
        'signature': json['signature'],
        'transactionHash': json['transactionHash'],
        'id': json['id'],
    };
}

export function ResponseBuyOrderToJSON(value?: ResponseBuyOrder | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'makerWalletId': value.makerWalletId,
        'makerWalletType': WalletTypeToJSON(value.makerWalletType),
        'takerWalletId': value.takerWalletId,
        'takerWalletType': WalletTypeToJSON(value.takerWalletType),
        'companyId': value.companyId,
        'makeTokenDataId': value.makeTokenDataId,
        'takeTokenDataId': value.takeTokenDataId,
        'sellOrderId': value.sellOrderId,
        'makeAmount': value.makeAmount,
        'takeAmount': value.takeAmount,
        'status': value.status,
        'type': MarketPlaceOrderTypesEnumToJSON(value.type),
        'isClaimed': value.isClaimed,
        'exchangeContract': value.exchangeContract,
        'startTime': value.startTime,
        'endTime': value.endTime,
        'signature': value.signature,
        'transactionHash': value.transactionHash,
        'id': value.id,
    };
}

