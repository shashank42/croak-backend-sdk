/* tslint:disable */
/* eslint-disable */
/**
 * namaste-be
 * Namaste Server
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  ICreateBuyOrder,
  ICreateMintSellOrder,
  ICreateSellOrder,
  IErrorResponse,
  ISignatureResponse,
  ResponsesIListBuyOrdersDataResp,
  ResponsesIListSellOrdersDataResp,
  ResponsesISignMarketplaceOrderString,
  ResponsesISubmitBuyOrderResponse,
  ResponsesString,
} from '../models';
import {
  ICreateBuyOrderFromJSON,
  ICreateBuyOrderToJSON,
  ICreateMintSellOrderFromJSON,
  ICreateMintSellOrderToJSON,
  ICreateSellOrderFromJSON,
  ICreateSellOrderToJSON,
  IErrorResponseFromJSON,
  IErrorResponseToJSON,
  ISignatureResponseFromJSON,
  ISignatureResponseToJSON,
  ResponsesIListBuyOrdersDataRespFromJSON,
  ResponsesIListBuyOrdersDataRespToJSON,
  ResponsesIListSellOrdersDataRespFromJSON,
  ResponsesIListSellOrdersDataRespToJSON,
  ResponsesISignMarketplaceOrderStringFromJSON,
  ResponsesISignMarketplaceOrderStringToJSON,
  ResponsesISubmitBuyOrderResponseFromJSON,
  ResponsesISubmitBuyOrderResponseToJSON,
  ResponsesStringFromJSON,
  ResponsesStringToJSON,
} from '../models';

export interface CreateBuyOrderRequest {
  accessToken: string;
  iCreateBuyOrder: ICreateBuyOrder;
}

export interface CreateMintSellOrderRequest {
  xApiKey: string;
  iCreateMintSellOrder: ICreateMintSellOrder;
}

export interface CreateSellOrderRequest {
  accessToken: string;
  iCreateSellOrder: ICreateSellOrder;
}

export interface ListBidOrdersRequest {
  xApiKey: string;
  lastId?: string;
  size?: number;
  walletId?: string;
  tokenDataId?: string;
}

export interface ListSellOrdersRequest {
  xApiKey: string;
  lastId?: string;
  size?: number;
  walletId?: string;
  tokenDataId?: string;
}

export interface SubmitBidOrderRequest {
  accessToken: string;
  iSignatureResponse: ISignatureResponse;
}

export interface SubmitSellOrderRequest {
  accessToken: string;
  iSignatureResponse: ISignatureResponse;
}

/**
 * MarketApisApi - interface
 *
 * @export
 * @interface MarketApisApiInterface
 */
export interface MarketApisApiInterface {
  /**
   * Create bid for a buy order
   * @param {string} accessToken - The access token of the user who is creating the order.
   * @param {ICreateBuyOrder} iCreateBuyOrder - ICreateBuyOrder - This is the request body that is sent to the API.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MarketApisApiInterface
   */
  createBuyOrderRaw(
    requestParameters: CreateBuyOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesISignMarketplaceOrderString>>;

  /**
   * Create bid for a buy order
   */
  createBuyOrder(
    requestParameters: CreateBuyOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesISignMarketplaceOrderString>;

  /**
   * Creates sell order for minting new tokens. This API is to be called by the client\'s server for listing new tokens on sale.
   * @param {string} xApiKey - This is the API key that is passed in the header of the request.
   * @param {ICreateMintSellOrder} iCreateMintSellOrder This is a sell order creation request description
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MarketApisApiInterface
   */
  createMintSellOrderRaw(
    requestParameters: CreateMintSellOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesISignMarketplaceOrderString>>;

  /**
   * Creates sell order for minting new tokens. This API is to be called by the client\'s server for listing new tokens on sale.
   */
  createMintSellOrder(
    requestParameters: CreateMintSellOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesISignMarketplaceOrderString>;

  /**
   * Creates sell order and return form data to sign
   * @param {string} accessToken - The access token of the user who is creating the sell order.
   * @param {ICreateSellOrder} iCreateSellOrder - ICreateSellOrder - This is the request body that is sent to the API.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MarketApisApiInterface
   */
  createSellOrderRaw(
    requestParameters: CreateSellOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesISignMarketplaceOrderString>>;

  /**
   * Creates sell order and return form data to sign
   */
  createSellOrder(
    requestParameters: CreateSellOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesISignMarketplaceOrderString>;

  /**
   * It returns a list of buy orders for a given company
   * @param {string} xApiKey - This is the API key that you will use to authenticate your requests.
   * @param {string} [lastId] - The last id of the last item in the previous page.
   * @param {number} [size] - The number of records to return.
   * @param {string} [walletId] - The walletId of the wallet that you want to list the buy orders for.
   * @param {string} [tokenDataId] - The id of the token data you want to list the buy orders for.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MarketApisApiInterface
   */
  listBidOrdersRaw(
    requestParameters: ListBidOrdersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesIListBuyOrdersDataResp>>;

  /**
   * It returns a list of buy orders for a given company
   */
  listBidOrders(
    requestParameters: ListBidOrdersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesIListBuyOrdersDataResp>;

  /**
   * It returns a list of sell orders for a company
   * @param {string} xApiKey - This is the API key that you will use to authenticate your requests.
   * @param {string} [lastId] - The last id of the last sell order returned. This is used to paginate the results.
   * @param {number} [size] - The number of sell orders to return.
   * @param {string} [walletId] - The walletId of the wallet that you want to list the sell orders for.
   * @param {string} [tokenDataId] - The id of the token data you want to list sell orders for.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MarketApisApiInterface
   */
  listSellOrdersRaw(
    requestParameters: ListSellOrdersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesIListSellOrdersDataResp>>;

  /**
   * It returns a list of sell orders for a company
   */
  listSellOrders(
    requestParameters: ListSellOrdersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesIListSellOrdersDataResp>;

  /**
   * It takes a signed bid order, saves it to the database, and returns the transaction hash and the token that was bid on
   * @param {string} accessToken -  The access token of the user who is creating the order.
   * @param {ISignatureResponse} iSignatureResponse - ISignatureResponse - This is the request body that is sent to the API. It is a JSON object that contains the id of the bid order and the signature of the bid order.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MarketApisApiInterface
   */
  submitBidOrderRaw(
    requestParameters: SubmitBidOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesISubmitBuyOrderResponse>>;

  /**
   * It takes a signed bid order, saves it to the database, and returns the transaction hash and the token that was bid on
   */
  submitBidOrder(
    requestParameters: SubmitBidOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesISubmitBuyOrderResponse>;

  /**
   * This function is called by the client when the user has signed the sell order form. The function saves the signed form and returns a success message
   * @param {string} accessToken - This is the access token of user selling the token
   * @param {ISignatureResponse} iSignatureResponse - ISignatureResponse - This is the body of the request. It\&#39;s a JSON object that contains the id of the order and the signature.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MarketApisApiInterface
   */
  submitSellOrderRaw(
    requestParameters: SubmitSellOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesString>>;

  /**
   * This function is called by the client when the user has signed the sell order form. The function saves the signed form and returns a success message
   */
  submitSellOrder(
    requestParameters: SubmitSellOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesString>;
}

/**
 *
 */
export class MarketApisApi extends runtime.BaseAPI implements MarketApisApiInterface {
  /**
   * Create bid for a buy order
   */
  async createBuyOrderRaw(
    requestParameters: CreateBuyOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesISignMarketplaceOrderString>> {
    if (requestParameters.accessToken === null || requestParameters.accessToken === undefined) {
      throw new runtime.RequiredError(
        'accessToken',
        'Required parameter requestParameters.accessToken was null or undefined when calling createBuyOrder.',
      );
    }

    if (requestParameters.iCreateBuyOrder === null || requestParameters.iCreateBuyOrder === undefined) {
      throw new runtime.RequiredError(
        'iCreateBuyOrder',
        'Required parameter requestParameters.iCreateBuyOrder was null or undefined when calling createBuyOrder.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (requestParameters.accessToken !== undefined && requestParameters.accessToken !== null) {
      headerParameters['access-token'] = String(requestParameters.accessToken);
    }

    const response = await this.request(
      {
        path: `/market/create-bid-order`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ICreateBuyOrderToJSON(requestParameters.iCreateBuyOrder),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ResponsesISignMarketplaceOrderStringFromJSON(jsonValue),
    );
  }

  /**
   * Create bid for a buy order
   */
  async createBuyOrder(
    requestParameters: CreateBuyOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesISignMarketplaceOrderString> {
    const response = await this.createBuyOrderRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Creates sell order for minting new tokens. This API is to be called by the client\'s server for listing new tokens on sale.
   */
  async createMintSellOrderRaw(
    requestParameters: CreateMintSellOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesISignMarketplaceOrderString>> {
    if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
      throw new runtime.RequiredError(
        'xApiKey',
        'Required parameter requestParameters.xApiKey was null or undefined when calling createMintSellOrder.',
      );
    }

    if (requestParameters.iCreateMintSellOrder === null || requestParameters.iCreateMintSellOrder === undefined) {
      throw new runtime.RequiredError(
        'iCreateMintSellOrder',
        'Required parameter requestParameters.iCreateMintSellOrder was null or undefined when calling createMintSellOrder.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
      headerParameters['x-api-key'] = String(requestParameters.xApiKey);
    }

    const response = await this.request(
      {
        path: `/market/create-mint-sell-order`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ICreateMintSellOrderToJSON(requestParameters.iCreateMintSellOrder),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ResponsesISignMarketplaceOrderStringFromJSON(jsonValue),
    );
  }

  /**
   * Creates sell order for minting new tokens. This API is to be called by the client\'s server for listing new tokens on sale.
   */
  async createMintSellOrder(
    requestParameters: CreateMintSellOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesISignMarketplaceOrderString> {
    const response = await this.createMintSellOrderRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Creates sell order and return form data to sign
   */
  async createSellOrderRaw(
    requestParameters: CreateSellOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesISignMarketplaceOrderString>> {
    if (requestParameters.accessToken === null || requestParameters.accessToken === undefined) {
      throw new runtime.RequiredError(
        'accessToken',
        'Required parameter requestParameters.accessToken was null or undefined when calling createSellOrder.',
      );
    }

    if (requestParameters.iCreateSellOrder === null || requestParameters.iCreateSellOrder === undefined) {
      throw new runtime.RequiredError(
        'iCreateSellOrder',
        'Required parameter requestParameters.iCreateSellOrder was null or undefined when calling createSellOrder.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (requestParameters.accessToken !== undefined && requestParameters.accessToken !== null) {
      headerParameters['access-token'] = String(requestParameters.accessToken);
    }

    const response = await this.request(
      {
        path: `/market/create-sell-order`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ICreateSellOrderToJSON(requestParameters.iCreateSellOrder),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ResponsesISignMarketplaceOrderStringFromJSON(jsonValue),
    );
  }

  /**
   * Creates sell order and return form data to sign
   */
  async createSellOrder(
    requestParameters: CreateSellOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesISignMarketplaceOrderString> {
    const response = await this.createSellOrderRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * It returns a list of buy orders for a given company
   */
  async listBidOrdersRaw(
    requestParameters: ListBidOrdersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesIListBuyOrdersDataResp>> {
    if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
      throw new runtime.RequiredError(
        'xApiKey',
        'Required parameter requestParameters.xApiKey was null or undefined when calling listBidOrders.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.lastId !== undefined) {
      queryParameters['lastId'] = requestParameters.lastId;
    }

    if (requestParameters.size !== undefined) {
      queryParameters['size'] = requestParameters.size;
    }

    if (requestParameters.walletId !== undefined) {
      queryParameters['walletId'] = requestParameters.walletId;
    }

    if (requestParameters.tokenDataId !== undefined) {
      queryParameters['tokenDataId'] = requestParameters.tokenDataId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
      headerParameters['x-api-key'] = String(requestParameters.xApiKey);
    }

    const response = await this.request(
      {
        path: `/market/list-bid-orders`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesIListBuyOrdersDataRespFromJSON(jsonValue));
  }

  /**
   * It returns a list of buy orders for a given company
   */
  async listBidOrders(
    requestParameters: ListBidOrdersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesIListBuyOrdersDataResp> {
    const response = await this.listBidOrdersRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * It returns a list of sell orders for a company
   */
  async listSellOrdersRaw(
    requestParameters: ListSellOrdersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesIListSellOrdersDataResp>> {
    if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
      throw new runtime.RequiredError(
        'xApiKey',
        'Required parameter requestParameters.xApiKey was null or undefined when calling listSellOrders.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.lastId !== undefined) {
      queryParameters['lastId'] = requestParameters.lastId;
    }

    if (requestParameters.size !== undefined) {
      queryParameters['size'] = requestParameters.size;
    }

    if (requestParameters.walletId !== undefined) {
      queryParameters['walletId'] = requestParameters.walletId;
    }

    if (requestParameters.tokenDataId !== undefined) {
      queryParameters['tokenDataId'] = requestParameters.tokenDataId;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
      headerParameters['x-api-key'] = String(requestParameters.xApiKey);
    }

    const response = await this.request(
      {
        path: `/market/list-sell-orders`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesIListSellOrdersDataRespFromJSON(jsonValue));
  }

  /**
   * It returns a list of sell orders for a company
   */
  async listSellOrders(
    requestParameters: ListSellOrdersRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesIListSellOrdersDataResp> {
    const response = await this.listSellOrdersRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * It takes a signed bid order, saves it to the database, and returns the transaction hash and the token that was bid on
   */
  async submitBidOrderRaw(
    requestParameters: SubmitBidOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesISubmitBuyOrderResponse>> {
    if (requestParameters.accessToken === null || requestParameters.accessToken === undefined) {
      throw new runtime.RequiredError(
        'accessToken',
        'Required parameter requestParameters.accessToken was null or undefined when calling submitBidOrder.',
      );
    }

    if (requestParameters.iSignatureResponse === null || requestParameters.iSignatureResponse === undefined) {
      throw new runtime.RequiredError(
        'iSignatureResponse',
        'Required parameter requestParameters.iSignatureResponse was null or undefined when calling submitBidOrder.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (requestParameters.accessToken !== undefined && requestParameters.accessToken !== null) {
      headerParameters['access-token'] = String(requestParameters.accessToken);
    }

    const response = await this.request(
      {
        path: `/market/submit-bid-order`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ISignatureResponseToJSON(requestParameters.iSignatureResponse),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesISubmitBuyOrderResponseFromJSON(jsonValue));
  }

  /**
   * It takes a signed bid order, saves it to the database, and returns the transaction hash and the token that was bid on
   */
  async submitBidOrder(
    requestParameters: SubmitBidOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesISubmitBuyOrderResponse> {
    const response = await this.submitBidOrderRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * This function is called by the client when the user has signed the sell order form. The function saves the signed form and returns a success message
   */
  async submitSellOrderRaw(
    requestParameters: SubmitSellOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesString>> {
    if (requestParameters.accessToken === null || requestParameters.accessToken === undefined) {
      throw new runtime.RequiredError(
        'accessToken',
        'Required parameter requestParameters.accessToken was null or undefined when calling submitSellOrder.',
      );
    }

    if (requestParameters.iSignatureResponse === null || requestParameters.iSignatureResponse === undefined) {
      throw new runtime.RequiredError(
        'iSignatureResponse',
        'Required parameter requestParameters.iSignatureResponse was null or undefined when calling submitSellOrder.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (requestParameters.accessToken !== undefined && requestParameters.accessToken !== null) {
      headerParameters['access-token'] = String(requestParameters.accessToken);
    }

    const response = await this.request(
      {
        path: `/market/submit-sell-order`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ISignatureResponseToJSON(requestParameters.iSignatureResponse),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesStringFromJSON(jsonValue));
  }

  /**
   * This function is called by the client when the user has signed the sell order form. The function saves the signed form and returns a success message
   */
  async submitSellOrder(
    requestParameters: SubmitSellOrderRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesString> {
    const response = await this.submitSellOrderRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
