/* tslint:disable */
/* eslint-disable */
/**
 * namaste-be
 * Namaste Server
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  IErrorResponse,
  IWalletCustomAuth,
  IWalletResetPassword,
  ResponsesCryptoWallet,
  ResponsesIWalletLoginResponse,
  ResponsesString,
} from '../models';
import {
  IErrorResponseFromJSON,
  IErrorResponseToJSON,
  IWalletCustomAuthFromJSON,
  IWalletCustomAuthToJSON,
  IWalletResetPasswordFromJSON,
  IWalletResetPasswordToJSON,
  ResponsesCryptoWalletFromJSON,
  ResponsesCryptoWalletToJSON,
  ResponsesIWalletLoginResponseFromJSON,
  ResponsesIWalletLoginResponseToJSON,
  ResponsesStringFromJSON,
  ResponsesStringToJSON,
} from '../models';

export interface EmailVerificationLinkRequest {
  iWalletCustomAuth: IWalletCustomAuth;
}

export interface LoginUserRequest {
  iWalletCustomAuth: IWalletCustomAuth;
}

export interface RegisterUserRequest {
  iWalletCustomAuth: IWalletCustomAuth;
}

export interface ResetPasswordRequest {
  iWalletResetPassword: IWalletResetPassword;
}

export interface ResetPasswordLinkRequest {
  iWalletCustomAuth: IWalletCustomAuth;
}

export interface VerifyEmailRequest {
  token?: string;
}

/**
 * EmailAuthApi - interface
 *
 * @export
 * @interface EmailAuthApiInterface
 */
export interface EmailAuthApiInterface {
  /**
   * Send email verification link
   * @param {IWalletCustomAuth} iWalletCustomAuth This is a wallet creation request description
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailAuthApiInterface
   */
  emailVerificationLinkRaw(
    requestParameters: EmailVerificationLinkRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesString>>;

  /**
   * Send email verification link
   */
  emailVerificationLink(
    requestParameters: EmailVerificationLinkRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesString>;

  /**
   * Return jwks
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailAuthApiInterface
   */
  jwksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesString>>;

  /**
   * Return jwks
   */
  jwks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesString>;

  /**
   * Login user with email/password
   * @param {IWalletCustomAuth} iWalletCustomAuth This is a wallet creation request description
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailAuthApiInterface
   */
  loginUserRaw(
    requestParameters: LoginUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesIWalletLoginResponse>>;

  /**
   * Login user with email/password
   */
  loginUser(
    requestParameters: LoginUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesIWalletLoginResponse>;

  /**
   * Register user with email/password
   * @param {IWalletCustomAuth} iWalletCustomAuth This is a wallet creation request description
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailAuthApiInterface
   */
  registerUserRaw(
    requestParameters: RegisterUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesCryptoWallet>>;

  /**
   * Register user with email/password
   */
  registerUser(
    requestParameters: RegisterUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesCryptoWallet>;

  /**
   * Verify email with link
   * @param {IWalletResetPassword} iWalletResetPassword This is a wallet creation request description
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailAuthApiInterface
   */
  resetPasswordRaw(
    requestParameters: ResetPasswordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesCryptoWallet>>;

  /**
   * Verify email with link
   */
  resetPassword(
    requestParameters: ResetPasswordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesCryptoWallet>;

  /**
   * Send password reset link
   * @param {IWalletCustomAuth} iWalletCustomAuth This is a wallet creation request description
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailAuthApiInterface
   */
  resetPasswordLinkRaw(
    requestParameters: ResetPasswordLinkRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesString>>;

  /**
   * Send password reset link
   */
  resetPasswordLink(
    requestParameters: ResetPasswordLinkRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesString>;

  /**
   * Verify email with link
   * @param {string} [token]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof EmailAuthApiInterface
   */
  verifyEmailRaw(
    requestParameters: VerifyEmailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesCryptoWallet>>;

  /**
   * Verify email with link
   */
  verifyEmail(
    requestParameters: VerifyEmailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesCryptoWallet>;
}

/**
 *
 */
export class EmailAuthApi extends runtime.BaseAPI implements EmailAuthApiInterface {
  /**
   * Send email verification link
   */
  async emailVerificationLinkRaw(
    requestParameters: EmailVerificationLinkRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesString>> {
    if (requestParameters.iWalletCustomAuth === null || requestParameters.iWalletCustomAuth === undefined) {
      throw new runtime.RequiredError(
        'iWalletCustomAuth',
        'Required parameter requestParameters.iWalletCustomAuth was null or undefined when calling emailVerificationLink.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/custom-auth/email-verification-link`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IWalletCustomAuthToJSON(requestParameters.iWalletCustomAuth),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesStringFromJSON(jsonValue));
  }

  /**
   * Send email verification link
   */
  async emailVerificationLink(
    requestParameters: EmailVerificationLinkRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesString> {
    const response = await this.emailVerificationLinkRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Return jwks
   */
  async jwksRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesString>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/custom-auth/jwks`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesStringFromJSON(jsonValue));
  }

  /**
   * Return jwks
   */
  async jwks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesString> {
    const response = await this.jwksRaw(initOverrides);
    return await response.value();
  }

  /**
   * Login user with email/password
   */
  async loginUserRaw(
    requestParameters: LoginUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesIWalletLoginResponse>> {
    if (requestParameters.iWalletCustomAuth === null || requestParameters.iWalletCustomAuth === undefined) {
      throw new runtime.RequiredError(
        'iWalletCustomAuth',
        'Required parameter requestParameters.iWalletCustomAuth was null or undefined when calling loginUser.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/custom-auth/login-user`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IWalletCustomAuthToJSON(requestParameters.iWalletCustomAuth),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesIWalletLoginResponseFromJSON(jsonValue));
  }

  /**
   * Login user with email/password
   */
  async loginUser(
    requestParameters: LoginUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesIWalletLoginResponse> {
    const response = await this.loginUserRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Register user with email/password
   */
  async registerUserRaw(
    requestParameters: RegisterUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesCryptoWallet>> {
    if (requestParameters.iWalletCustomAuth === null || requestParameters.iWalletCustomAuth === undefined) {
      throw new runtime.RequiredError(
        'iWalletCustomAuth',
        'Required parameter requestParameters.iWalletCustomAuth was null or undefined when calling registerUser.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/custom-auth/register-user`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IWalletCustomAuthToJSON(requestParameters.iWalletCustomAuth),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesCryptoWalletFromJSON(jsonValue));
  }

  /**
   * Register user with email/password
   */
  async registerUser(
    requestParameters: RegisterUserRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesCryptoWallet> {
    const response = await this.registerUserRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Verify email with link
   */
  async resetPasswordRaw(
    requestParameters: ResetPasswordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesCryptoWallet>> {
    if (requestParameters.iWalletResetPassword === null || requestParameters.iWalletResetPassword === undefined) {
      throw new runtime.RequiredError(
        'iWalletResetPassword',
        'Required parameter requestParameters.iWalletResetPassword was null or undefined when calling resetPassword.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/custom-auth/password-reset`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IWalletResetPasswordToJSON(requestParameters.iWalletResetPassword),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesCryptoWalletFromJSON(jsonValue));
  }

  /**
   * Verify email with link
   */
  async resetPassword(
    requestParameters: ResetPasswordRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesCryptoWallet> {
    const response = await this.resetPasswordRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Send password reset link
   */
  async resetPasswordLinkRaw(
    requestParameters: ResetPasswordLinkRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesString>> {
    if (requestParameters.iWalletCustomAuth === null || requestParameters.iWalletCustomAuth === undefined) {
      throw new runtime.RequiredError(
        'iWalletCustomAuth',
        'Required parameter requestParameters.iWalletCustomAuth was null or undefined when calling resetPasswordLink.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/custom-auth/reset-password-link`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IWalletCustomAuthToJSON(requestParameters.iWalletCustomAuth),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesStringFromJSON(jsonValue));
  }

  /**
   * Send password reset link
   */
  async resetPasswordLink(
    requestParameters: ResetPasswordLinkRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesString> {
    const response = await this.resetPasswordLinkRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Verify email with link
   */
  async verifyEmailRaw(
    requestParameters: VerifyEmailRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesCryptoWallet>> {
    const queryParameters: any = {};

    if (requestParameters.token !== undefined) {
      queryParameters['token'] = requestParameters.token;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/custom-auth/verify-email`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesCryptoWalletFromJSON(jsonValue));
  }

  /**
   * Verify email with link
   */
  async verifyEmail(
    requestParameters: VerifyEmailRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesCryptoWallet> {
    const response = await this.verifyEmailRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
