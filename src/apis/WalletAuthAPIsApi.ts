/* tslint:disable */
/* eslint-disable */
/**
 * namaste-be
 * Namaste Server
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
  IErrorResponse,
  IRefreshToken,
  IVerifyToken,
  IWalletAuth,
  ResponsesBoolean,
  ResponsesIRefreshTokenResponse,
  ResponsesIWalletAuthResponse,
} from '../models';
import {
  IErrorResponseFromJSON,
  IErrorResponseToJSON,
  IRefreshTokenFromJSON,
  IRefreshTokenToJSON,
  IVerifyTokenFromJSON,
  IVerifyTokenToJSON,
  IWalletAuthFromJSON,
  IWalletAuthToJSON,
  ResponsesBooleanFromJSON,
  ResponsesBooleanToJSON,
  ResponsesIRefreshTokenResponseFromJSON,
  ResponsesIRefreshTokenResponseToJSON,
  ResponsesIWalletAuthResponseFromJSON,
  ResponsesIWalletAuthResponseToJSON,
} from '../models';

export interface ExchangeTokenRequest {
  iWalletAuth: IWalletAuth;
}

export interface RefreshTokenFromClientServerRequest {
  xApiKey: string;
  iRefreshToken: IRefreshToken;
}

export interface VerifyUserFromClientServerRequest {
  xApiKey: string;
  iVerifyToken: IVerifyToken;
}

/**
 * WalletAuthAPIsApi - interface
 *
 * @export
 * @interface WalletAuthAPIsApiInterface
 */
export interface WalletAuthAPIsApiInterface {
  /**
   * Get access token and refresh token a wallet by signing into with twitch/youtube oauth
   * @param {IWalletAuth} iWalletAuth - IWalletAuth. This is a wallet creation request description
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WalletAuthAPIsApiInterface
   */
  exchangeTokenRaw(
    requestParameters: ExchangeTokenRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesIWalletAuthResponse>>;

  /**
   * Get access token and refresh token a wallet by signing into with twitch/youtube oauth
   */
  exchangeToken(
    requestParameters: ExchangeTokenRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesIWalletAuthResponse>;

  /**
   * Refresh access token of a wallet. To be called from client server.
   * @param {string} xApiKey - This is the API key that is generated when you created the client.
   * @param {IRefreshToken} iRefreshToken - IRefreshToken - This is the request body that is sent to the server.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WalletAuthAPIsApiInterface
   */
  refreshTokenFromClientServerRaw(
    requestParameters: RefreshTokenFromClientServerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesIRefreshTokenResponse>>;

  /**
   * Refresh access token of a wallet. To be called from client server.
   */
  refreshTokenFromClientServer(
    requestParameters: RefreshTokenFromClientServerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesIRefreshTokenResponse>;

  /**
   * Verify user on Glip backend for security. Get the access token provided on from exchange-token api  and send to glip backend at least once for a user to ensure that user exists.
   * @param {string} xApiKey - This is the api key of the client server. client.
   * @param {IVerifyToken} iVerifyToken
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof WalletAuthAPIsApiInterface
   */
  verifyUserFromClientServerRaw(
    requestParameters: VerifyUserFromClientServerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesBoolean>>;

  /**
   * Verify user on Glip backend for security. Get the access token provided on from exchange-token api  and send to glip backend at least once for a user to ensure that user exists.
   */
  verifyUserFromClientServer(
    requestParameters: VerifyUserFromClientServerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesBoolean>;
}

/**
 *
 */
export class WalletAuthAPIsApi extends runtime.BaseAPI implements WalletAuthAPIsApiInterface {
  /**
   * Get access token and refresh token a wallet by signing into with twitch/youtube oauth
   */
  async exchangeTokenRaw(
    requestParameters: ExchangeTokenRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesIWalletAuthResponse>> {
    if (requestParameters.iWalletAuth === null || requestParameters.iWalletAuth === undefined) {
      throw new runtime.RequiredError(
        'iWalletAuth',
        'Required parameter requestParameters.iWalletAuth was null or undefined when calling exchangeToken.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/auth/exchange-token`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IWalletAuthToJSON(requestParameters.iWalletAuth),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesIWalletAuthResponseFromJSON(jsonValue));
  }

  /**
   * Get access token and refresh token a wallet by signing into with twitch/youtube oauth
   */
  async exchangeToken(
    requestParameters: ExchangeTokenRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesIWalletAuthResponse> {
    const response = await this.exchangeTokenRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Refresh access token of a wallet. To be called from client server.
   */
  async refreshTokenFromClientServerRaw(
    requestParameters: RefreshTokenFromClientServerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesIRefreshTokenResponse>> {
    if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
      throw new runtime.RequiredError(
        'xApiKey',
        'Required parameter requestParameters.xApiKey was null or undefined when calling refreshTokenFromClientServer.',
      );
    }

    if (requestParameters.iRefreshToken === null || requestParameters.iRefreshToken === undefined) {
      throw new runtime.RequiredError(
        'iRefreshToken',
        'Required parameter requestParameters.iRefreshToken was null or undefined when calling refreshTokenFromClientServer.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
      headerParameters['x-api-key'] = String(requestParameters.xApiKey);
    }

    const response = await this.request(
      {
        path: `/auth/refresh-token`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IRefreshTokenToJSON(requestParameters.iRefreshToken),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesIRefreshTokenResponseFromJSON(jsonValue));
  }

  /**
   * Refresh access token of a wallet. To be called from client server.
   */
  async refreshTokenFromClientServer(
    requestParameters: RefreshTokenFromClientServerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesIRefreshTokenResponse> {
    const response = await this.refreshTokenFromClientServerRaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * Verify user on Glip backend for security. Get the access token provided on from exchange-token api  and send to glip backend at least once for a user to ensure that user exists.
   */
  async verifyUserFromClientServerRaw(
    requestParameters: VerifyUserFromClientServerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ResponsesBoolean>> {
    if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
      throw new runtime.RequiredError(
        'xApiKey',
        'Required parameter requestParameters.xApiKey was null or undefined when calling verifyUserFromClientServer.',
      );
    }

    if (requestParameters.iVerifyToken === null || requestParameters.iVerifyToken === undefined) {
      throw new runtime.RequiredError(
        'iVerifyToken',
        'Required parameter requestParameters.iVerifyToken was null or undefined when calling verifyUserFromClientServer.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
      headerParameters['x-api-key'] = String(requestParameters.xApiKey);
    }

    const response = await this.request(
      {
        path: `/auth/verify-token`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: IVerifyTokenToJSON(requestParameters.iVerifyToken),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesBooleanFromJSON(jsonValue));
  }

  /**
   * Verify user on Glip backend for security. Get the access token provided on from exchange-token api  and send to glip backend at least once for a user to ensure that user exists.
   */
  async verifyUserFromClientServer(
    requestParameters: VerifyUserFromClientServerRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ResponsesBoolean> {
    const response = await this.verifyUserFromClientServerRaw(requestParameters, initOverrides);
    return await response.value();
  }
}
