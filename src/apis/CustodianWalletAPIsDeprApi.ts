/* tslint:disable */
/* eslint-disable */
/**
 * namaste-be
 * Namaste Server
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IErrorResponse,
  IWallet,
  IWalletSign,
  IWalletTypedSign,
  ResponsesCryptoWallet,
  ResponsesCryptoWalletArray,
  ResponsesIGetWalletResp,
  ResponsesString,
  ResponsesWalletBalance,
} from '../models';
import {
    IErrorResponseFromJSON,
    IErrorResponseToJSON,
    IWalletFromJSON,
    IWalletToJSON,
    IWalletSignFromJSON,
    IWalletSignToJSON,
    IWalletTypedSignFromJSON,
    IWalletTypedSignToJSON,
    ResponsesCryptoWalletFromJSON,
    ResponsesCryptoWalletToJSON,
    ResponsesCryptoWalletArrayFromJSON,
    ResponsesCryptoWalletArrayToJSON,
    ResponsesIGetWalletRespFromJSON,
    ResponsesIGetWalletRespToJSON,
    ResponsesStringFromJSON,
    ResponsesStringToJSON,
    ResponsesWalletBalanceFromJSON,
    ResponsesWalletBalanceToJSON,
} from '../models';

export interface CreateCustodialWalletRequest {
    xApiKey: string;
    iWallet: IWallet;
}

export interface GetCustodialWalletRequest {
    walletId: string;
    xApiKey: string;
}

export interface GetCustodialWalletBalanceRequest {
    walletId: string;
    xApiKey: string;
}

export interface GetUserCustodialWalletsRequest {
    email: string;
    xApiKey: string;
}

export interface ListCustodialWalletsRequest {
    xApiKey: string;
    lastId?: string;
    size?: number;
}

export interface SignMessageRequest {
    xApiKey: string;
    iWalletSign: IWalletSign;
}

export interface SignTypedDataRequest {
    xApiKey: string;
    iWalletTypedSign: IWalletTypedSign;
}

/**
 * CustodianWalletAPIsDeprApi - interface
 * 
 * @export
 * @interface CustodianWalletAPIsDeprApiInterface
 */
export interface CustodianWalletAPIsDeprApiInterface {
    /**
     * Create a new wallet
     * @param {string} xApiKey 
     * @param {IWallet} iWallet This is a wallet creation request description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodianWalletAPIsDeprApiInterface
     */
    createCustodialWalletRaw(requestParameters: CreateCustodialWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesCryptoWallet>>;

    /**
     * Create a new wallet
     */
    createCustodialWallet(requestParameters: CreateCustodialWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesCryptoWallet>;

    /**
     * Get wallet info
     * @param {string} walletId 
     * @param {string} xApiKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodianWalletAPIsDeprApiInterface
     */
    getCustodialWalletRaw(requestParameters: GetCustodialWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesCryptoWallet>>;

    /**
     * Get wallet info
     */
    getCustodialWallet(requestParameters: GetCustodialWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesCryptoWallet>;

    /**
     * Get wallet balance for wallet
     * @param {string} walletId 
     * @param {string} xApiKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodianWalletAPIsDeprApiInterface
     */
    getCustodialWalletBalanceRaw(requestParameters: GetCustodialWalletBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesWalletBalance>>;

    /**
     * Get wallet balance for wallet
     */
    getCustodialWalletBalance(requestParameters: GetCustodialWalletBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesWalletBalance>;

    /**
     * Get list of wallets of user
     * @param {string} email 
     * @param {string} xApiKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodianWalletAPIsDeprApiInterface
     */
    getUserCustodialWalletsRaw(requestParameters: GetUserCustodialWalletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesCryptoWalletArray>>;

    /**
     * Get list of wallets of user
     */
    getUserCustodialWallets(requestParameters: GetUserCustodialWalletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesCryptoWalletArray>;

    /**
     * Get list of wallets for company
     * @param {string} xApiKey 
     * @param {string} [lastId] 
     * @param {number} [size] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodianWalletAPIsDeprApiInterface
     */
    listCustodialWalletsRaw(requestParameters: ListCustodialWalletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesIGetWalletResp>>;

    /**
     * Get list of wallets for company
     */
    listCustodialWallets(requestParameters: ListCustodialWalletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesIGetWalletResp>;

    /**
     * Sign a message by a wallet
     * @param {string} xApiKey 
     * @param {IWalletSign} iWalletSign This is a wallet creation request description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodianWalletAPIsDeprApiInterface
     */
    signMessageRaw(requestParameters: SignMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesString>>;

    /**
     * Sign a message by a wallet
     */
    signMessage(requestParameters: SignMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesString>;

    /**
     * Sign a message by a wallet
     * @param {string} xApiKey 
     * @param {IWalletTypedSign} iWalletTypedSign This is a wallet creation request description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustodianWalletAPIsDeprApiInterface
     */
    signTypedDataRaw(requestParameters: SignTypedDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesString>>;

    /**
     * Sign a message by a wallet
     */
    signTypedData(requestParameters: SignTypedDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesString>;

}

/**
 * 
 */
export class CustodianWalletAPIsDeprApi extends runtime.BaseAPI implements CustodianWalletAPIsDeprApiInterface {

    /**
     * Create a new wallet
     */
    async createCustodialWalletRaw(requestParameters: CreateCustodialWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesCryptoWallet>> {
        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling createCustodialWallet.');
        }

        if (requestParameters.iWallet === null || requestParameters.iWallet === undefined) {
            throw new runtime.RequiredError('iWallet','Required parameter requestParameters.iWallet was null or undefined when calling createCustodialWallet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/custodian-wallet/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IWalletToJSON(requestParameters.iWallet),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesCryptoWalletFromJSON(jsonValue));
    }

    /**
     * Create a new wallet
     */
    async createCustodialWallet(requestParameters: CreateCustodialWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesCryptoWallet> {
        const response = await this.createCustodialWalletRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get wallet info
     */
    async getCustodialWalletRaw(requestParameters: GetCustodialWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesCryptoWallet>> {
        if (requestParameters.walletId === null || requestParameters.walletId === undefined) {
            throw new runtime.RequiredError('walletId','Required parameter requestParameters.walletId was null or undefined when calling getCustodialWallet.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling getCustodialWallet.');
        }

        const queryParameters: any = {};

        if (requestParameters.walletId !== undefined) {
            queryParameters['walletId'] = requestParameters.walletId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/custodian-wallet/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesCryptoWalletFromJSON(jsonValue));
    }

    /**
     * Get wallet info
     */
    async getCustodialWallet(requestParameters: GetCustodialWalletRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesCryptoWallet> {
        const response = await this.getCustodialWalletRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get wallet balance for wallet
     */
    async getCustodialWalletBalanceRaw(requestParameters: GetCustodialWalletBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesWalletBalance>> {
        if (requestParameters.walletId === null || requestParameters.walletId === undefined) {
            throw new runtime.RequiredError('walletId','Required parameter requestParameters.walletId was null or undefined when calling getCustodialWalletBalance.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling getCustodialWalletBalance.');
        }

        const queryParameters: any = {};

        if (requestParameters.walletId !== undefined) {
            queryParameters['walletId'] = requestParameters.walletId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/custodian-wallet/balance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesWalletBalanceFromJSON(jsonValue));
    }

    /**
     * Get wallet balance for wallet
     */
    async getCustodialWalletBalance(requestParameters: GetCustodialWalletBalanceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesWalletBalance> {
        const response = await this.getCustodialWalletBalanceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of wallets of user
     */
    async getUserCustodialWalletsRaw(requestParameters: GetUserCustodialWalletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesCryptoWalletArray>> {
        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling getUserCustodialWallets.');
        }

        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling getUserCustodialWallets.');
        }

        const queryParameters: any = {};

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/custodian-wallet/email`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesCryptoWalletArrayFromJSON(jsonValue));
    }

    /**
     * Get list of wallets of user
     */
    async getUserCustodialWallets(requestParameters: GetUserCustodialWalletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesCryptoWalletArray> {
        const response = await this.getUserCustodialWalletsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get list of wallets for company
     */
    async listCustodialWalletsRaw(requestParameters: ListCustodialWalletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesIGetWalletResp>> {
        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling listCustodialWallets.');
        }

        const queryParameters: any = {};

        if (requestParameters.lastId !== undefined) {
            queryParameters['lastId'] = requestParameters.lastId;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/custodian-wallet/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesIGetWalletRespFromJSON(jsonValue));
    }

    /**
     * Get list of wallets for company
     */
    async listCustodialWallets(requestParameters: ListCustodialWalletsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesIGetWalletResp> {
        const response = await this.listCustodialWalletsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sign a message by a wallet
     */
    async signMessageRaw(requestParameters: SignMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesString>> {
        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling signMessage.');
        }

        if (requestParameters.iWalletSign === null || requestParameters.iWalletSign === undefined) {
            throw new runtime.RequiredError('iWalletSign','Required parameter requestParameters.iWalletSign was null or undefined when calling signMessage.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/custodian-wallet/sign`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IWalletSignToJSON(requestParameters.iWalletSign),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesStringFromJSON(jsonValue));
    }

    /**
     * Sign a message by a wallet
     */
    async signMessage(requestParameters: SignMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesString> {
        const response = await this.signMessageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sign a message by a wallet
     */
    async signTypedDataRaw(requestParameters: SignTypedDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ResponsesString>> {
        if (requestParameters.xApiKey === null || requestParameters.xApiKey === undefined) {
            throw new runtime.RequiredError('xApiKey','Required parameter requestParameters.xApiKey was null or undefined when calling signTypedData.');
        }

        if (requestParameters.iWalletTypedSign === null || requestParameters.iWalletTypedSign === undefined) {
            throw new runtime.RequiredError('iWalletTypedSign','Required parameter requestParameters.iWalletTypedSign was null or undefined when calling signTypedData.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xApiKey !== undefined && requestParameters.xApiKey !== null) {
            headerParameters['x-api-key'] = String(requestParameters.xApiKey);
        }

        const response = await this.request({
            path: `/custodian-wallet/sign-typed-data`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IWalletTypedSignToJSON(requestParameters.iWalletTypedSign),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResponsesStringFromJSON(jsonValue));
    }

    /**
     * Sign a message by a wallet
     */
    async signTypedData(requestParameters: SignTypedDataRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ResponsesString> {
        const response = await this.signTypedDataRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
